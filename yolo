numberLimit = 0#numberAt may not pass this value for efficiency
numberAt = 1#the value being tested for divisibility of number
number = 0#the number having its divisors found
divisors = []#list of divisors of number
iterate = 1#what to iterate by to find the divisors of number
divCount = 0#number of divisors of number
divString = ""#formatted version of the divisors array
divSum = 0#sum of all divisors of number
i = 0#represents the place of the object in divisors being handled
divObj = 0#inherits each object in divisors procedurally

#block 1
while True:#until a valid number is gotten
    print("Input a whole number to find the divisors of")#prompt
    try:#possible errors: ValueError
        number = int(input(">>>"))#input number
        if number >= 0:#if number greater or equal to 0
            if number == 0:#if number equals 0
                print("Everything is a divisor of 0, and when added up 0's divisors evaluate to infinity")#print info for 0
            elif number == 1:#if number equals 1
                print("The divisor of 1 is 1, and 1's divisor can't be summed up to anything.")#print info for 1
            elif number == 2:#if number equals 2
                print("The divisors of 2 are 1 and 2, and when 2's divisors are added up they equal 3")#print info for 2
                number = 3#set number to 3: code breaks if this is not run
                break#block 2 is run
            break
                break#block 2 is run
        else:#number is negative
            print("That was not a properly formatted whole number. Type your number like 5, not 5.0")#prompt
    except ValueError:#number was not an int
        print("That was not a properly formatted whole number. Type your number like 5, not 5.0")#prompt
#block 2
while True:#until the end of time
    divisors.append(number)#number is a divisor of number by definiiton
    numberLimit = number / 2#when testing divisibility, it is useless to test past half of the number
    if number % 2 == 0:#if number is even
        divisors.append(int(numberLimit))#add numberLimit to the list because it is by definition a divisor of number
        numberLimit -= 1#subtract 1 to number limit because it is already known it is a divisor of number so it is useless to test divisibilty with it
        iterate = 1#has to iterate by 1 because number has odd and even divisors
    else:#number is odd
        numberLimit -= 0.5#make numberLimit whole
        iterate = 2#can iterate by 2 because number has only odd divisor
    while numberAt <= numberLimit:#while testing divisibilty is still practical
        if number % numberAt == 0:#if number is divisible by numberAt
            divisors.append(numberAt)#add numberAt to the list of divisors
        numberAt += iterate#add to numberAt by iterate
    divisors.sort()#sort the divisors in order of lest to greatest for display
#block 2;2
    for divObj in divisors:#divObj equals each item in divisors per iteration
        divSum += divObj#sum all divisors of number into divsum
        divCount += 1#counts the number of items in divisors
    for i in range(1, 1 + divCount):#creating loop where i represents the object place in divisors
        divString += str(divisors[i - 1])#add the first divisor to divstring
        if i + 1 == divCount:#if there is exactly one more divisor left to be handled
            if i > 1:#if there needs to be a comma after the second to last divisor
                divString += ", and " + str(divisors[i])#adding final divisor to divString
                break#run rest of code; divString is complete
            else:#no comma needed
                divString += " and " + str(divisors[i])#adding final divisor to divString
                break#run rest of code; divString is complete
        else:#more than 1 divisor left to be handled
            divString += ", "#add a comma m8
        
    print("The divisors of ", number, " are: ", divString, " and when the divisors of ", number, " are added up they equal ", divSum)#print out the final formatted text that tells the user the number, its divisors, and what they add up to
    divisors = []#reset divisors; the divisors would keep piling up otherwise
    numberAt = 1#reset numberAt; otherwise the code would not test some divisors for divisibilty in some cases
    number = divSum#number equals the sum of its divisors
    divSum = 0#reset divSum; the sum of diviors would pile up otherwise
    divCount = 0#reset divCount; the number of divisors would pile up otherwise
    divString = ""#reset divString; the wrong information would be displayed otherwise
